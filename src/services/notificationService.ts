import * as Notifications from 'expo-notifications';
import * as Device from 'expo-device';

// Bildirimleri configure et
Notifications.setNotificationHandler({
  handleNotification: async () => ({
    shouldShowAlert: true,
    shouldPlaySound: true,
    shouldSetBadge: false,
    shouldShowBanner: true, // Yeni property
    shouldShowList: true,    // Yeni property
  }),
});

export const notificationService = {
  async requestPermissions(): Promise<boolean> {
    try {
      if (!Device.isDevice) {
        console.log('Bildirimler sadece fiziksel cihazlarda Ã§alÄ±ÅŸÄ±r!');
        return false;
      }

      const { status: existingStatus } = await Notifications.getPermissionsAsync();
      let finalStatus = existingStatus;
      
      if (existingStatus !== 'granted') {
        const { status } = await Notifications.requestPermissionsAsync();
        finalStatus = status;
      }
      
      if (finalStatus !== 'granted') {
        console.log('Bildirim izni reddedildi!');
        return false;
      }
      
      console.log('Bildirim izni alÄ±ndÄ±!');
      return true;
    } catch (error) {
      console.error('Bildirim izni hatasÄ±:', error);
      return false;
    }
  },

  async schedulePriceAlert(assetSymbol: string, targetPrice: number, condition: 'above' | 'below') {
    try {
      await Notifications.scheduleNotificationAsync({
        content: {
          title: 'ðŸ’° Fiyat AlarmÄ±!',
          body: `${assetSymbol} fiyatÄ± ${condition === 'above' ? 'Ã¼zerine' : 'altÄ±na'} Ã§Ä±ktÄ±: $${targetPrice}`,
          sound: true,
          priority: Notifications.AndroidNotificationPriority.HIGH,
        },
        trigger: null,
      });
      console.log(`Fiyat alarmÄ± ayarlandÄ±: ${assetSymbol} ${condition} $${targetPrice}`);
    } catch (error) {
      console.error('Fiyat alarmÄ± hatasÄ±:', error);
    }
  },

  async showPortfolioUpdate(totalValue: number, change: number) {
    try {
      await Notifications.scheduleNotificationAsync({
        content: {
          title: 'ðŸ“Š PortfÃ¶y GÃ¼ncellemesi',
          body: `PortfÃ¶y deÄŸerin: $${totalValue.toFixed(2)} (${change >= 0 ? '+' : ''}${change.toFixed(2)}%)`,
          sound: true,
        },
        trigger: null,
      });
    } catch (error) {
      console.error('PortfÃ¶y bildirimi hatasÄ±:', error);
    }
  },

  async showTransactionSuccess(assetSymbol: string, type: 'buy' | 'sell', quantity: number) {
    try {
      await Notifications.scheduleNotificationAsync({
        content: {
          title: 'âœ… Ä°ÅŸlem TamamlandÄ±',
          body: `${type === 'buy' ? 'AlÄ±ÅŸ' : 'SatÄ±ÅŸ'} iÅŸlemi: ${quantity} ${assetSymbol}`,
          sound: true,
        },
        trigger: null,
      });
    } catch (error) {
      console.error('Ä°ÅŸlem bildirimi hatasÄ±:', error);
    }
  },

  async showWelcomeNotification() {
    try {
      await Notifications.scheduleNotificationAsync({
        content: {
          title: 'ðŸŽ‰ Portfoly\'a HoÅŸ Geldiniz!',
          body: 'PortfÃ¶yÃ¼nÃ¼zÃ¼ takip etmeye baÅŸlayÄ±n. Ä°lk iÅŸleminizi ekleyin!',
          sound: true,
        },
        trigger: null,
      });
    } catch (error) {
      console.error('HoÅŸ geldin bildirimi hatasÄ±:', error);
    }
  },

  async showDailySummary(totalValue: number, dailyChange: number) {
    try {
      await Notifications.scheduleNotificationAsync({
        content: {
          title: 'ðŸ“ˆ GÃ¼nlÃ¼k Ã–zet',
          body: `PortfÃ¶y: $${totalValue.toFixed(2)} (GÃ¼nlÃ¼k: ${dailyChange >= 0 ? '+' : ''}${dailyChange.toFixed(2)}%)`,
          sound: true,
        },
        trigger: null,
      });
    } catch (error) {
      console.error('GÃ¼nlÃ¼k Ã¶zet bildirimi hatasÄ±:', error);
    }
  },

  async showPriceTargetReached(assetSymbol: string, currentPrice: number, targetPrice: number) {
    try {
      await Notifications.scheduleNotificationAsync({
        content: {
          title: 'ðŸŽ¯ Hedef Fiyata UlaÅŸÄ±ldÄ±!',
          body: `${assetSymbol} $${currentPrice} seviyesine ulaÅŸtÄ± (Hedef: $${targetPrice})`,
          sound: true,
          priority: Notifications.AndroidNotificationPriority.HIGH,
        },
        trigger: null,
      });
    } catch (error) {
      console.error('Hedef fiyat bildirimi hatasÄ±:', error);
    }
  },

  // TÃ¼m bildirimleri temizle
  async clearAllNotifications() {
    await Notifications.cancelAllScheduledNotificationsAsync();
    await Notifications.dismissAllNotificationsAsync();
  },

  // Bildirim token'Ä±nÄ± al (push notification iÃ§in)
  async getPushToken(): Promise<string | null> {
    try {
      if (!Device.isDevice) {
        return null;
      }

      const token = (await Notifications.getExpoPushTokenAsync()).data;
      console.log('Push Token:', token);
      return token;
    } catch (error) {
      console.error('Push token alma hatasÄ±:', error);
      return null;
    }
  },

  // Bildirim sayÄ±sÄ±nÄ± sÄ±fÄ±rla
  async setBadgeCount(count: number) {
    await Notifications.setBadgeCountAsync(count);
  }
};